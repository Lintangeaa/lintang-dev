import jsPDF from "jspdf";
import html2canvas from "html2canvas";

interface InvoiceOrder {
  id: string;
  createdAt: string;
  customerName: string;
  companyName: string;
  whatsapp: string;
  websiteName: string;
  description: string;
  colorPrimary: string;
  colorSecondary: string;
  serviceId: string;
  totalPrice: number;
}

export function generateInvoicePdf(order: InvoiceOrder) {
  const doc = new jsPDF({ unit: "pt", format: "a4" });

  const pad = 24;
  let y = 48;

  doc.setFont("helvetica", "bold");
  doc.setFontSize(18);
  doc.text("Invoice", pad, y);
  y += 8;

  doc.setFont("helvetica", "normal");
  doc.setFontSize(10);
  doc.text(`Invoice ID: ${order.id}`, pad, (y += 18));
  doc.text(`Date: ${new Date(order.createdAt).toLocaleString()}`, pad, (y += 16));

  y += 16;
  doc.setFont("helvetica", "bold");
  doc.setFontSize(12);
  doc.text("Bill To:", pad, (y += 18));
  doc.setFont("helvetica", "normal");
  doc.text(order.customerName, pad, (y += 16));
  doc.text(order.companyName, pad, (y += 14));
  doc.text(`WhatsApp: ${order.whatsapp}`, pad, (y += 14));

  y += 20;
  doc.setFont("helvetica", "bold");
  doc.text("Project Details:", pad, (y += 18));
  doc.setFont("helvetica", "normal");
  doc.text(`Website: ${order.websiteName}`, pad, (y += 14));
  doc.text(`Service ID: ${order.serviceId}`, pad, (y += 14));

  const desc = doc.splitTextToSize(`Description: ${order.description}`, 540);
  doc.text(desc, pad, (y += 16));

  y += 20;
  doc.setFont("helvetica", "bold");
  doc.text("Colors:", pad, (y += 18));
  doc.setFont("helvetica", "normal");
  doc.text(`Primary: ${order.colorPrimary}   Secondary: ${order.colorSecondary}`, pad, (y += 14));

  y += 24;
  doc.setFont("helvetica", "bold");
  doc.setFontSize(14);
  doc.text(`Total: Rp ${order.totalPrice.toLocaleString("id-ID")}`, pad, (y += 20));

  // Footer
  y = 790;
  doc.setFontSize(9);
  doc.setTextColor(120);
  doc.text("Generated by Soulcode", pad, y);

  const filename = `invoice-${order.id}.pdf`;
  doc.save(filename);
}

export async function exportInvoiceElementToPdf(element: HTMLElement, filename: string = "invoice.pdf") {
  const a4WidthPt = 595.28; // A4 width in points
  const a4HeightPt = 841.89; // A4 height in points
  const scale = 1.5; // balanced quality and performance

  // Temporarily adjust element for better capture
  const originalWidth = element.style.width;
  const originalHeight = element.style.height;
  const originalOverflow = element.style.overflow;
  
  element.style.width = `${a4WidthPt}px`;
  element.style.height = 'auto';
  element.style.overflow = 'visible';

  const canvas = await html2canvas(element, {
    scale,
    backgroundColor: "#ffffff",
    useCORS: true,
    logging: false,
    allowTaint: true,
    foreignObjectRendering: false,
    width: a4WidthPt * scale,
    height: element.scrollHeight * scale,
    scrollX: 0,
    scrollY: 0,
    ignoreElements: (el) => {
      return el.classList?.contains('print:hidden') || false;
    }
  });

  // Restore original styles
  element.style.width = originalWidth;
  element.style.height = originalHeight;
  element.style.overflow = originalOverflow;

  const imgData = canvas.toDataURL("image/png", 1.0);
  const imgWidth = a4WidthPt;
  const imgHeight = (canvas.height * imgWidth) / canvas.width;

  const pdf = new jsPDF({ 
    unit: "pt", 
    format: "a4",
    orientation: imgHeight > a4HeightPt ? "portrait" : "portrait"
  });

  // Calculate scaling to fit content properly
  const scaleX = a4WidthPt / canvas.width;
  const scaleY = a4HeightPt / canvas.height;
  const scaleToFit = Math.min(scaleX, scaleY, 1); // Don't scale up

  const finalWidth = canvas.width * scaleToFit;
  const finalHeight = canvas.height * scaleToFit;

  // Center the content
  const xOffset = (a4WidthPt - finalWidth) / 2;
  const yOffset = Math.max(0, (a4HeightPt - finalHeight) / 2);

  pdf.addImage(imgData, "PNG", xOffset, yOffset, finalWidth, finalHeight);
  pdf.save(filename);
}


